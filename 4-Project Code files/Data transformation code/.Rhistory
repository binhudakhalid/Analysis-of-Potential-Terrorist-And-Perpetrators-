predictions <- predict(
object = model,
newdata = test,
type = "class")
table(
x = predictions,
y = test$isTerrorist)
confusionMatrix(
data = predictions,
reference = test$Species)
# Set working directory
#setwd("C:/Pluralsight")
# Save the tree model
save(model, file = "Tree.RDataFinal")
# Save the training data
save(train, file = "Train.RDataFinal")
confusionMatrix(
data = predictions,
reference = test$Species)
confusionMatrix(
data = predictions,
reference = test$isTerrorist)
setwd("F:/UBIT 7th/data mining/Project/tree")
save(model1, file = "Tree.RDataFinal1")
library(tree)
load("Train.RDataFinal")
load("Tree.RDataFinal")
library(RColorBrewer)
palette <- brewer.pal(3, "Set2")
ui <- fluidPage(
titlePanel("Terror Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Sex",
label = "Sex",
min = 0,
max = 1,
step = 1,
value = 0),
sliderInput(
inputId = "MadersaTraing",
label = "MadersaTraing",
min = 0,
max = 1,
step = 1,
value = 1)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
library(shiny)
ui <- fluidPage(
titlePanel("Terror Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "Sex",
label = "Sex",
min = 0,
max = 1,
step = 1,
value = 0),
sliderInput(
inputId = "MadersaTraing",
label = "MadersaTraing",
min = 0,
max = 1,
step = 1,
value = 1)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
server <- function(input, output) {
output$text = renderText({
# Create predictors
predictors <- data.frame(
Sex = input$Sex,
MadersaTraing = input$MadersaTraing,
#  Sepal.Length = 0,   idhr dekh
#   Sepal.Width = 0)
)
# Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# Create prediction text
paste(
"The predicted Terror is ",
as.character(prediction))
})
output$plot = renderPlot({
# Create a scatterplot colored by species
plot(
x = theData2$Sex,
y = theData2$MadersaTraing,
pch = 19,
col = palette[as.numeric(theData2$isTerrorist)],
main = "Iris Petal Length vs. Width",
xlab = "Sex (cm)",
ylab = "Maderasa (cm)")
# Plot the decision boundaries
#partition.tree(
# model,
#label = "Terror",
#add = TRUE)
# Draw predictor on plot
points(
x = input$Sex,
y = input$MadersaTraing,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
runApp('AppProject.R')
runApp('AppProject.R')
runApp('AppProject.R')
runApp('AppProject.R')
runApp('AppProject.R')
install.packages('party')
setwd(F:/UBIT 7th/data mining/github)
setwd("F:/UBIT 7th/data mining/github")
install.packages(c("e1071", "ROCR", "SDMTools"))
library(e1071)
library(ROCR)
library(SDMTools)
library(rpart)
library(randomForest)
data<-read.csv("creditdata.csv")
data$Purpose<-as.integer(data$Purpose)
for (purp in data$Purpose){
data$Purpose[which(data$Purpose[purp]==NA)]<-10
}
data<-as.data.frame(data)
nsplit<-nrow(data)/2
train<-data[1:nsplit,]
test<-data[(nsplit+1):nrow(data),]
logitmodel<-glm(Class~.,data=train,family=binomial("logit"))
logitmodel.probs<-predict(logitmodel, test, type = "response")
logitmodel.class<-predict(logitmodel, test)
logitmodel.labels<-test$Class
logitmodel.confusion<-confusion.matrix(logitmodel.labels,logitmodel.class)
logitmodel.accuracy<-prop.correct(logitmodel.confusion)
logitmodel.prediction<-prediction(logitmodel.probs,logitmodel.labels)
logitmodel.performance<-performance(logitmodel.prediction,"tpr","fpr")
logitmodel.auc<-performance(logitmodel.prediction,"auc")@y.values[[1]]
svmmodel<-svm(as.factor(Class)~., data=train, method="C-classification", kernel="radial",cross=5, probability=TRUE)
svmmodel.predict<-predict(svmmodel,subset(test,select=-Class),decision.values=TRUE)
svmmodel.probs<-attr(svmmodel.predict,"decision.values")
svmmodel.class<-svmmodel.predict[1:nsplit]
svmmodel.labels<-test$Class
svmmodel.confusion<-confusion.matrix(svmmodel.labels,svmmodel.class)
svmmodel.accuracy<-prop.correct(svmmodel.confusion)
svmmodel.prediction<-prediction(svmmodel.probs,svmmodel.labels)
svmmodel.performance<-performance(svmmodel.prediction,"tpr","fpr")
svmmodel.auc<-performance(svmmodel.prediction,"auc")@y.values[[1]]
treemodel<-rpart(Class~.,data = train,method="class")
treemodel.class<-predict(treemodel,test,type="class")
treemodel.probs<-predict(treemodel,test,type="prob")
treemodel.labels<-test$Class
treemodel.confusion<-confusion.matrix(treemodel.labels,treemodel.class)
treemodel.accuracy<-prop.correct(treemodel.confusion)
treemodel.prediction<-prediction(treemodel.probs[,2],treemodel.labels)
treemodel.performance<-performance(treemodel.prediction,"tpr","fpr")
treemodel.auc<-performance(treemodel.prediction,"auc")@y.values[[1]]
rfmodel<-randomForest(Class~.,data = train,importance=TRUE)
rfmodel.class<-predict(rfmodel,test,type="response")
rfmodel.probs<-predict(rfmodel,test)
rfmodel.labels<-test$Class
rfmodel.confusion<-confusion.matrix(rfmodel.labels,rfmodel.class)
rfmodel.accuracy<-prop.correct(rfmodel.confusion)
rfmodel.prediction<-prediction(rfmodel.probs,rfmodel.labels)
rfmodel.performance<-performance(rfmodel.prediction,"tpr","fpr")
rfmodel.auc<-performance(rfmodel.prediction,"auc")@y.values[[1]]
windows()
windows()
plot(logitmodel.performance,col="red",lwd=2)
plot(svmmodel.performance,add=TRUE,col="green",lwd=2)
plot(treemodel.performance,add=TRUE,col="blue",lwd=2)
plot(rfmodel.performance,add=TRUE,col="black",lwd=2)
title(main="ROC Curve of 4 models", font.main=4)
plot_range<-range(0,0.5,0.5,0.5,0.5)
legend(0.5, plot_range[2], c("logistic regression","svm","decision tree","random forest"), cex=0.8,
col=c("red","green","blue","black"), pch=21:22, lty=1:2)
data<-read.csv("creditdata.csv")
str(data)
data$Purpose<-as.integer(data$Purpose)
for (purp in data$Purpose){
data$Purpose[which(data$Purpose[purp]==NA)]<-10
}
data<-as.data.frame(data)
str(data)
data
head(data)
str(data)
setwd("F:/UBIT 7th/data mining/datatransform")
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"))
library(XLConnect)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"))
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
theData <- readWorksheet(loadWorkbook("Violent_Extremism_Complete1.xlsx"),sheet=1)
Database <- readWorksheet(loadWorkbook("Violent_Extremism_C1.xlsx"),sheet=1)
str(theData)
str(Database)
tail(Database)
df <- Database[,colSums(is.na(Database))<nrow(Database)]
df <- Database[,colSums(is.na(Database))<nrow(Database)]
tail(df)
Database <- readWorksheet(loadWorkbook("Violent_Extremism_C1.xlsx"),sheet=1)
Database <- readWorksheet(loadWorkbook("Violent_Extremism_C1.xlsx"),sheet=1)
tail(Database)
df <- Database[,colSums(is.na(Database))<nrow(Database)]
Filter(function(x)!all(is.na(x)), df)
df <- Filter(function(x)!all(is.na(x)), df)
df
tail(df)
Database <- readWorksheet(loadWorkbook("Violent_Extremism_C1.xlsx"),sheet=1)
str(Database)
Database$isTerrorist %<>% factor
library(magrittr)
Database$isTerrorist %<>% factor
Database$isTerrorist %<>% factor
Database$IsTerrorist %<>% factor
str(Database)
Database$Col25
save <- Database
Col25(Database)[which(names(Database) == "Col25")] <- "MaritalStatus"
colnames(Database)[which(names(Database) == "Col25")] <- "MaritalStatus"
head(Database$MaritalStatus)
sum(is.na(MaritalStatus))
sum(is.na(Database$MaritalStatus))
save1<- Database
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- "Married"
sum(is.na(Database$MaritalStatus))
View(Database)
Database <- save1
sum(is.na(Database$MaritalStatus))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- Database$MaritalStatus[sample(1:nrow(Database), nrow(Database), FALSE)] <- rep(values, c("Married","split","Unmarried"))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- Database$MaritalStatus[sample(1:nrow(Database), nrow(Database), FALSE)] <- rep(MaritalStatus, c("Married","split","Unmarried"))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- rep(values, c("Married","unmarried"))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- rep(Database$MaritalStatus, c("Married","unmarried"))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- rep(MaritalStatus, c("Married","unmarried"))
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- rep( c("Married","unmarried"))
sum(is.na(Database$MaritalStatus))
View(Database)
saves3 <- Database
sum(is.na(Database$MaritalStatus))
sum(is.na(Database$Name))
sum(is.na(Database$Plot))
within(Databae, rm(Plot))
within(Databae, rm(Plot))
within(Database, rm(Plot))
within(Database, rm(Plot))
Database <- within(Database, rm(Plot))
View(Database)
Database$Attended.terrorist.training.camp
Database <- save1
is.na(Database$Attended.terrorist.training.camp)
count(is.na(Database$Attended.terrorist.training.camp))
sum(is.na(Database$Attended.terrorist.training.camp))
Database <- within(Database, rm(Plot))
sum(is.na(Database$Attended.terrorist.training.camp))
sum(is.na(Database$Age)
saves3 <- Database
saves4 <- Database
str(Database)
Database$Age <- cut(Database$Age, c(0,18,19,30,31,45,30))
$Age
Database$Age
Database$Age <- cut(Database$Age,
breaks = c(-Inf, 17, 30, 45, 60 ,Inf),
#  labels = c("0-5 mnths", "6-11 mnths", "12-23 mnths", "24-59 mnths", "5-14 yrs", "adult"),
right = FALSE)
Database$Age
str(Database$Age)
save5 <- Database
str(Attended.terrorist.training.camp)
str(Attended.terrorist.training.camp)
str(Database$Attended.terrorist.training.camp)
Database$Attended.terrorist.training.camp %<>% factor
str(Database$Attended.terrorist.training.camp)
Database$Attended.terrorist.training.camp[is.factor(Database$Attended.terrorist.training.camp)]
Database$Attended.terrorist.training.camp[level(Pakistan)]
Database$Attended.terrorist.training.camp[Level(Pakistan)]
Database$Attended.terrorist.training.camp[Levels(Pakistan)]
Database$Attended.terrorist.training.camp(Levels(Pakistan))
Database$Attended.terrorist.training.camp[Levels(Database$MaritalStatus)]
Database$Attended.terrorist.training.camp[Database$MaritalStatus(Levels(Pakistan))]
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp(Levels(Pakistan))]
Levels(Database$Attended.terrorist.training.camp)
levels(Database$Attended.terrorist.training.camp)
levels(Database$Attended.terrorist.training.camp[levels(Pakistan)])
levels(factor(Database$Attended.terrorist.training.camp))
Database$Attended.terrorist.training.camp
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"]
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"] <- Yes
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"] <- NULL
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"] <- NULL
str(save5)
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"] <- Yes
Database <- NULL
Database <- save5
Database$Attended.terrorist.training.camp[Database$Attended.terrorist.training.camp == "Pakistan"] <- "Yes"
Database$Attended.terrorist.training.camp %<>% factor
str(Database)
save6 <- Database
sum(is.na(Database$Sex))
sum(is.na(Database$Sex))
Database$Sex %<>% factor
str(Database)
sum(is.na(Database$Islam))
Database$Islam %<>% factor
str(Database)
str(Database$Islam)
levels(Database$Islam)
Database$Islam[Database$Islam == "Yes"] <- "Yes"
Database$Islam[Database$Islam == "yes"] <- "Yes"
No
Database$Islam[Database$Islam == "No"] <- "No"
Database$Islam[Database$Islam == "No"] <- "No"
Database$Islam[Database$Islam == "No"] <- "No"
Database$Islam[Database$Islam == "No?"] <- "No"
Database$Islam[Database$Islam == "?"] <- "No"
levels(Database$Islam)
View(Database)
saves6 <- Database
levels(droplevels(Database$Islam))
saves6 <- Database
saves7 <- Database
save1 <- NULL
str(Database)
Database$Ethnicity.National.Origin
str(Database)
Database$Madrasa.training
is.na(Database$Madrasa.training)
Database$Madrasa.training %<>% factor
str(Database)
levels(Database$Madrasa.training)
sum(Database$Madrasa.training == "No")
sum(Database$Madrasa.training == " ")
sum(Database$Madrasa.training[Database$Madrasa.training  == "No"])
sum(is.factor(Database$Madrasa.training[Database$Madrasa.training  == "No"])
)
sum(is.factor(Database$Madrasa.training[Database$Madrasa.training  == "Yes"])
)
summary(Database$Madrasa.training)
Database$Madrasa.training[Database$Madrasa.training == " "] <- "Yes"
Database$Madrasa.training[Database$Madrasa.training == "?"] <- "Yes"
Database$Madrasa.training[Database$Madrasa.training == "unknown"] <- "Yes"
summary(Database$Madrasa.training)
levels(Database$Madrasa.training)
Database$Madrasa.training[Database$Madrasa.training == "Unknown"] <- "Yes"
summary(Database$Madrasa.training)
sum(is.na(Database$Madrasa.training)
summary(Database$Madrasa.training)
sum(is.na(Database$Madrasa.training))
Database$Madrasa.training[Database$Madrasa.training == ""] <- "Yes"
sum(is.na(Database$Madrasa.training))
Database$Madrasa.training[is.na(Database$Madrasa.training)] <- rep( c("Yes","No"))
Database$Madrasa.training[is.na(Database$Madrasa.training)] <- rep( c("Yes","No"))
summary(Database$Madrasa.training)
levels(droplevels(Database$Madrasa.training))
str(Database)
summary(Database$Madrasa.training)
levels(droplevels(Database$Madrasa.training))
Saves8 <- Database
Database <- levels(droplevels(Database$Madrasa.training))
str(Database)
Database  <- Saves8
str(Database)
summary(Database$Islam)
Database$Madrasa.training <- levels(droplevels(Database$Madrasa.training))
summary(Database$Madrasa.training)
Database$Madrasa.training %<>% factor
str(Database)
Save9 <- Database
Database$Islam <- levels(droplevels(Database$Islam))
Database$Islam %<>% factor
str(Database)
Save10 <- Database
write.xlsx(Database, five, sheetName="Sheet1")
library(xlsx)
write.xlsx(Database, five, sheetName="Sheet1")
write.xlsx(Database, file, sheetName="Sheet1")
write.xlsx(Database, file, sheetName="Sheet1")
write.xlsx(Database, file, sheetName="Sheet1")
write.csv(Database, "filename.csv")
str(Database)
summary(Mental.Illness )
summary(Database$Mental.Illness )
Database$Mental.Illness %<>% factor
summary(Database$Mental.Illness )
levels(Database$Mental.Illness)
Database$Mental.Illness[Database$Mental.Illness == "Diagnosed before arrest/attack"] <- "Yes"
Database$Mental.Illness[Database$Mental.Illness == "Hospitalized before arrest/attack"] <- "Yes"
Database$Mental.Illness[Database$Mental.Illness == "Hospitalized after arrest/attack"] <- "Yes"
Database$Mental.Illness[Database$Mental.Illness == "yes"] <- "Yes"
summary(Database$Mental.Illness )
Database$Mental.Illness <- levels(droplevels(Database$Mental.Illness))
summary(Database$Mental.Illness )
Database$Mental.Illness %<>% factor
summary(Database$Mental.Illness )
str(Database)
save11 <- Database
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
levels(Database$Mental.Illness)
levels(Database$Educational.attainment)
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "College degree?"] <- "College degree"
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "Graduate training"] <- "Graduate"
levels(Database$Educational.attainment)
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
levels(Database$Educational.attainment)
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- "No School"
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- "No School"
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- "No School"
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
sum(is.na(Database$Educational.attainment))
Database$Educational.attainment[is.na(Database$Educational.attainment)]  rep( c("No School"))
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- rep( c("No School"))
summary(Database$Educational.attainment)
View(Database)
str(Database$Educational.attainment)
summary(Database$Educational.attainment)
sum(Database$Educational.attainment[is.na(Database$Educational.attainment)])
sum(Database$Educational.attainment[is.na(Database$Educational.attainment)])
Database$Educational.attainment[is.na(Database$Educational.attainment)]
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- rep( c("No School"))
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
Database$Educational.attainment<- as.character(Database$Educational.attainment)
summary(Database$Educational.attainment)
save12 <- Database
Database$Educational.attainment[Database$Educational.attainment == "NA's"] <- "No School"
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
Database$Educational.attainment<- as.character(Database$Educational.attainment)
Database$Educational.attainment[is.na(Database$Educational.attainment)] <- rep( c("No School"))
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
Database$Educational.attainment<- as.character(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "?"] <- "No School"
Database$Educational.attainment[Database$Educational.attainment == "College degree"] <- "College"
Database$Educational.attainment[Database$Educational.attainment == "High school degree?"] <- "College"
Database$Educational.attainment[Database$Educational.attainment == "High school student"] <- "College"
Database$Educational.attainment[Database$Educational.attainment == "Some high school"] <- "School"
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "High school degree"] <- "Graduate"
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "Some college"] <- "College"
Database$Educational.attainment[Database$Educational.attainment == "High school degree or less than high school degree"] <- "College"
Database$Educational.attainment<- as.character(Database$Educational.attainment)
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
summary(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "High school degree or less than high school degree"] <- "College"
Database$Educational.attainment[Database$Educational.attainment == "High school degree or less than high school degree"] <- "College"
summary(Database$Educational.attainment)
summary(Database$Educational.attainment)
levels(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == " "] <- "School"
Database$Educational.attainment[Database$Educational.attainment == "High school degree or less than high school"] <- "School"
Database$Educational.attainment[Database$Educational.attainment == "HighSchool"] <- "School"
Database$Educational.attainment<- as.character(Database$Educational.attainment)
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
levels(Database$Educational.attainment)
Database$Educational.attainment[Database$Educational.attainment == "Less than high school degree" "No School"] <- "School"
Database$Educational.attainment[Database$Educational.attainment == "Less than high school degree"] <- "School"
Database$Educational.attainment<- as.character(Database$Educational.attainment)
Database$Educational.attainment %<>% factor
summary(Database$Educational.attainment)
save13 <- Database
str(Database)
Database$MaritalStatus %<>% factor
summary(Database$MaritalStatus)
Database$MaritalStatus <- as.character(Database$MaritalStatus)
summary(Database$MaritalStatus)
Database$MaritalStatus [Database$MaritalStatus == "Unmarried"] <- "Single"
Database$MaritalStatus [Database$MaritalStatus == "Divorced"] <- "Single"
Database$MaritalStatus [Database$MaritalStatus == "Split"] <- "Single"
Database$MaritalStatus [Database$MaritalStatus == "Widowed"] <- "Single"
Database$MaritalStatus [Database$MaritalStatus == "Unknown"] <- "Married"
Database$MaritalStatus[is.na(Database$MaritalStatus)] <- "Single"
Database$MaritalStatus %<>% factor
summary(Database$MaritalStatus)
Save14 <- Database
write.csv(Da, "Datatransformed.csv")
write.csv(Database, "Datatransformed.csv")
data<-read.csv("creditdata.csv")
setwd("F:/UBIT 7th/ata mining/github")
setwd("F:/UBIT 7th/ata mining/github")
save.image("F:/UBIT 7th/data mining/datatransform/x.RData")
setwd("F:/UBIT 7th/ata mining/github")
