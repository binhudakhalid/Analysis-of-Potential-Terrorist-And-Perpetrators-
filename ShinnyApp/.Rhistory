AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 +
BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 +
PAY_AMT4 + PAY_AMT5 + PAY_AMT6
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
library(rpart)
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
table(predict(tree_rpart), Filedata.train$default.payment.next.month)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.test$default.payment.next.month)
plot(testPred)
table(predict(tree_rpart, newdata = Filedata.test), Filedata.test$default.payment.next.month)
table(predict(tree_rpart, newdata = Filedata.train), Filedata.test$default.payment.next.month)
table(predict(tree_rpart, newdata = Filedata.train), Filedata.train$default.payment.next.month)
table(predict(tree_rpart), Filedata.train$default.payment.next.month)
print(tree_rpart)
Filedata <- read.csv("UCI_Credit_Card.csv",  header=TRUE)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7, 0.3))
Filedata.train <- Filedata[ind==1,]
Filedata.test <- Filedata[ind==2,]
library(rpart)
myFormula <-as.factor(default.payment.next.month) ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE +
AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 +
BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 +
PAY_AMT4 + PAY_AMT5 + PAY_AMT6
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
predict(tree_rpart), Filedata.train$default.payment.next.month
predict(tree_rpart)
table(predict(tree_rpart), Filedata.train$default.payment.next.month)
table(predict(tree_rpart, newdata = Filedata.train), Filedata.train$default.payment.next.month)
#get Data From Csv file
Filedata <- read.csv("UCI_Credit_Card.csv",  header=TRUE)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7, 0.3))
Filedata.train <- Filedata[ind==1,]
Filedata.test <- Filedata[ind==2,]
# train a decision tree
library(rpart)
myFormula <- default.payment.next.month ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE +
AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 +
BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 +
PAY_AMT4 + PAY_AMT5 + PAY_AMT6
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
View(Filedata)
table(predict(tree_rpart), Filedata.train$default.payment.next.month)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.test$default.payment.next.month)
table(predict(as.factor(tree_rpart)), Filedata.train$default.payment.next.month)
attributes(tree_rpart)
attributes(tree_rpart)
print(tree_rpart)
myFormula <- as.factor(default.payment.next.month) ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE +
AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 +
BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 +
PAY_AMT4 + PAY_AMT5 + PAY_AMT6
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
print(tree_rpart)
table(predict(tree_rpart), Filedata.train$default.payment.next.month)
print(tree_rpart)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.test$default.payment.next.month)
table(testPred, Filedata.test)
table(testPred, Filedata.train)
$default.payment.next.month
print(tree_rpart$cptable)
table(pred=tree_rpart,true=testset$Class)
table(pred=tree_rpart,true=Filedata.train$Class)
table(pred=tree_rpart,true=Filedata.train$default.payment.next.month)
table(pred=tree_rpart,true=Filedata.test$default.payment.next.month)
confusionMatrix(tree_rpart, Filedata.test$default.payment.next.month)
pred
library(rpart)
pred
pred = predict(tree_rpart, type="class")
table(pred)
table(pred, Filedata.train$default.payment.next.month)
table(pred, Filedata.test$default.payment.next.month)
pred
str(pred)
len(pred)
length(pred)
length(Filedata.test$default.payment.next.month)
table(pred, Filedata.test$default.payment.next.month)
table(pred[1:9028,], Filedata.test$default.payment.next.month)
pred[1:9028,]
pred[9028,]
pred[]
pred[1:2,1]
pred[1:2,]
dim(pred)
length(pred)
table(pred[1:9028], Filedata.test$default.payment.next.month)
(15560 + 1702 )/( 18482+2490 )
0.8230975*100
15691+	3099
657+	1525
3099
1525
3099+1525
657+	1525
15691+657
(15691+ 1525)/( 18790+2182)
0.8209041 *100
(788  +2922 )/ (18482+2490)
(788  +2922 )/ (18482+2490) *100
(657  +3099 )/( 18790+2182)  )
(657  +3099 )/( 18790+2182) *100
15560/18482
15691/18790
1525/2182
1,702/2,490
1702/2490
15,560  / ( 15560+ 788  )
15560  / ( 15560+ 788  )
15691  / (15691 + 657)
15560  / (15560 + 2922)
(2 * 0.9517984  * 0.8419002) / (0.9517984  + 0.8419002   )
15691 / 18790
(2* 0.9598116* 0.8350718 ) /( 0.9598116+ 0.8350718)
getwd()
Salary.data <- read.csv("adult1.csv", TRUE,”1”)
Salary.data <- read.csv("adult1.csv")
View(Salary.data)
Filedata <- Salary.data[1:500,]
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7,0.3))
trainData <- Salary.data[ind==1,]
testData <- Salary.data[ind ==2,]
library(party)
myFormula <- France ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
salary_ctree <- ctree(myFormula, data = trainData)
predict(salary_ctree, trainData$France)
myFormula <- France ~  workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
salary_ctree <- ctree(myFormula, data = trainData)
predict(salary_ctree, trainData$France)
myFormula <- as.factor( France ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country)
myFormula <- as.factor( France ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country)
myFormula <- as.factor(  France) ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
salary_ctree <- ctree(myFormula, data = trainData)
predict(salary_ctree, trainData$France)
salary_ctree
trainData
predict(salary_ctree, testData$France)
rainData$France
trainData$France
salary_ctree
predict(salary_ctree, trainData$France)
predict(salary_ctree, trainData)
table(predict(salary_ctree), trainData$France)
testPred <- predict(salary_ctree, newdata = testData)
table(testPred, testData$France)
Salary.data <- read.csv("adult1.csv", TRUE, “,”)
#get Data From Csv file
Salary.data <- read.csv("adult1.csv", TRUE, “,”)
str(Filedata)
head(Filedata)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7, 0.3))
Filedata.train <- Salary.data[ind==1,]
Filedata.test <-  Salary.data[ind==2,]
Salary.data <- read.csv("adult1.csv")
str(Filedata)
head(Filedata)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7, 0.3))
Filedata.train <- Salary.data[ind==1,]
Filedata.test <-  Salary.data[ind==2,]
# train a decision tree
library(rpart)
str(Filedata)
head(Filedata)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7
, 0.3))
#get Data From Csv file
Salary.data <- read.csv("adult1.csv")
str(Salary.data)
head(Salary.data)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Salary.data), replace=TRUE, prob=c(0.7, 0.3))
Filedata.train <- Salary.data[ind==1,]
Filedata.test <-  Salary.data[ind==2,]
myFormula <- as.factor(France) ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
tree_rpart <- rpart(myFormula, data = Filedata.train,
control = rpart.control(minsplit = 10))
table(predict(tree_rpart), Filedata.train$France)
table(predict(tree_rpart), Filedata.test$France)
dim(Filedata.train$France)
dim(tree_rpart)
length(tree_rpart)
length(Filedata.train$France)
table(predict(tree_rpart), Filedata.train$France)
table(predict(tree_rpart), Filedata.train$France)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.test$France)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.test$France)
length(testPred)
length(Filedata.test$France)
table(testPred, Filedata.train$France)
length(Filedata.train$France)
table(testPred, Filedata.train$France[1:19516,])
table(testPred, Filedata.train$France[1:19516])
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.train$France[1:19516])
myFormula <- as.factor(France) ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
tree_rpart <- rpart(myFormula, data = Filedata.train)
length(tree_rpart)
length(Filedata.train$France)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.train$France[1:19516])
table(testPred, Filedata.test$France[1:19516])
testPred <- predict(tree_rpart, newdata = Filedata.train)
table(testPred, Filedata.train$France[1:19516])
length(testPred)
length()
length(Filedata.train$France)
table(testPred, Filedata.train$France)
est
)
testPred <- predict(tree_rpart, newdata = Filedata.test)
table(testPred, Filedata.train$France[1:19516])
table(testPred, as.factor(Filedata.train$France[1:19516]))
testPred <- as.factor(predict(tree_rpart, newdata = Filedata.test))
table(testPred, Filedata.train$France[1:19516])
pred = predict(tree_rpart, type="class")
table(pred)
table(pred, Filedata.train$default.payment.next.month)
length(pred)
length()Filedata.train$default.payment.next.month
length(Filedata.train$default.payment.next.month)
table(pred, Filedata.train$France)
table(pred, Filedata.test$France)
table(pred, Filedata.test$France[1:22794])
str(Salary.data)
attr(Salary.data)
str(Salary.data)
head(Salary.data)
str(Salary.data)
library(party)
Filedata <- read.csv("adult1.csv",  header=TRUE)
hData <- Filedata[1:300,]
Filedata[1:300,]
set.seed(415)
myFormula <- France ~  age + workclass + fnlwgt + education + education.num + marital.status + occupation + relationship + race + sex + capital.gain + capital.loss + hours.per.week + native.country
fitt <- cforest(myFormula,
data = hData,
controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fitt, Filedata, OOB=TRUE, type = "response")
Prediction
table(predict, Filedata.train$default.payment.next.month)
table(predict, hData$France)
table(predict, Filedata$France)
Prediction <- predict(fitt, Filedata, OOB=TRUE, type = "response")
table(Prediction, Filedata$France)
table(Prediction, hData$France)
length(Prediction)
table(Prediction, hData$France[1:32552])
gc()
library(randomForest)
rf <- randomForest(as.factor(France) ~ ., data=Filedata, ntree=1, proximity=TRUE)
# Add fit lines
abline(lm(mpg~wt), col="red") # regression line (y~x)
lines(lowess(wt,mpg), col="blue") # lowess line (x,y)
Fittness <-(2,4)
Fittness <-c(2,4)
Fittness
Fittness <-c(35.5,
-12.5,
-4.5,
73.0,
-12.5,
115.5,
115.5,
75.0,
-5.0,
-12.5,
-0.5,
95.5,
57.0,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
95.5,
13.0,
73.0,
-7.0,
115.5,
75.0,
27.5,
-4.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
67.0,
67.0,
67.0,
67.0,
67.0,
95.5,
13.0,
115.5,
115.5,
75.0,
67.0,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
-0.5,
-0.5,
-0.5,
107.5,
15.0,
15.0,
15.0,
15.0,
95.5,
73.0,
115.5,
115.5,
75.0,
95.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
-0.5,
15.0,
107.5,
107.5,
107.5,
107.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
95.5,
73.0,
115.5,
115.5,
75.0,
95.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
115.5,
-0.5,
107.5,
107.5,
107.5,
107.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
115.5,
95.5,
67.0,
67.0,
67.0,67.0,
67.0)
Fittness
plot(wt, mpg, main="Scatterplot Example",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(Fittness, mpg, main="Scatterplot Example",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(Fittness, Fittness, main="Scatterplot Example",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(Fittness, Fittness, main="EVOLUTIONARY",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(Fittness, Fittness, main="Evolutionary Algorithms Fittness",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(lm(Fittness~wt), col="red") # regression line (y~x)
abline(lm(mpg~Fittness), col="red") # regression line (y~x)
abline(lm(Fittness~Fittness), col="red") # regression line (y~x)
plot(Fittness, Fittness, main="Evolutionary Algorithms Fittness",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
PopNumber <- c(1:100)
PopNumber
plot(Fittness, PopNumber, main="Evolutionary Algorithms Fittness",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
length(Fittness)
PopNumber <- c(1:137)
plot(Fittness, PopNumber, main="Evolutionary Algorithms Fittness",      xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(Fittness, PopNumber, main="Evolutionary Algorithms Fittness",      xlab="Fittness Function ", ylab="Population Index ", pch=19)
gc();
pwd
getwd()
Filedata <- read.csv("pap.csv",  header=TRUE)
Filedata <- read.csv("pap.csv",  header=TRUE)
Filedata
fittness <- Filedata[, 3 ];
fittness <- Filedata[, 2 ];
fittness
PopNumber <- [1:100]
PopNumber <- c[1:100]
PopNumber <- seq(1, 100)
PopNumber
PopNumber <- seq(1, 1000)
PopNumber
fittness
PopNumber <- seq(1, 313)
PopNumber
fittness
PopNumber
plot(fittness, PopNumber, main="8 Queen Evolutionary Algorithms Fittness",
xlab="Fittness Function ", ylab="Iterations ", pch=19)
fittness
length(fittness)
PopNumber <- seq(1, 318)
plot(fittness, PopNumber, main="8 Queen Evolutionary Algorithms Fittness",
xlab="Fittness Function ", ylab="Iterations ", pch=19)
plot( PopNumber,fittness, main="8 Queen Evolutionary Algorithms Fittness",
xlab="Fittness Function ", ylab="Iterations ", pch=19)
plot( PopNumber,fittness, main="8 Queen Evolutionary Algorithms Fittness",
xlab="Fittness Function ", ylab="Iterations ", pch=19)
plot(fittness, PopNumber, main="8 Queen Evolutionary Algorithms Fittness",
xlab="Fittness Function ", ylab="Iterations ", pch=19)
fittness
install.packages('party')
library(party)
library(party)
#get Data From Csv file
Filedata <- read.csv("UCI_Credit_Card.csv",  header=TRUE)
hData <- Filedata[1:300,]
Filedata[1:300,]
set.seed(415)
myFormula <- as.factor (default.payment.next.month) ~ LIMIT_BAL + SEX + EDUCATION + MARRIAGE +
AGE + PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6 + BILL_AMT1 + BILL_AMT2 +
BILL_AMT3 + BILL_AMT4 + BILL_AMT5 + BILL_AMT6 + PAY_AMT1 + PAY_AMT2 + PAY_AMT3 +
PAY_AMT4 + PAY_AMT5 + PAY_AMT6
install.packages("party")
Prediction <- predict(fitt, Filedata, OOB=TRUE, type = "response")
Prediction
Prediction
Prediction
Prediction
myFormula
fitt
View(Filedata)
View(Filedata)
dat = read.csv("Datatransformed.csv", header = TRUE)
View(Filedata)
setwd("F:/UBIT 7th/TheResearchPaper/myproject/ShinnyApp")
dat = read.csv("Datatransformed.csv", header = TRUE)
myFormula <- IsTerrorist ~ MaritalStatus + EducationalAttainment +
Military + MadrasAtraining + MentalIllness +  Islam + Sex + Age
trainIndex <- 1:800
ro <- dat[1,]
terro.ct1 <- ctree(myFormula, data = trainData, method = "class")
library(party)
terro.ct1 <- ctree(myFormula, data = trainData, method = "class")
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7,0.3))
Filedata <-dat
str(dat)
set.seed(1234)#ramdom
ind <- sample(2, nrow(Filedata), replace=TRUE, prob=c(0.7,0.3))
trainData <- Filedata[ind==1,]
testData <- Filedata[ind ==2,]
myFormula <- IsTerrorist ~ MaritalStatus + EducationalAttainment +
Military + MadrasAtraining + MentalIllness +  Islam + Sex + Age
terro.ct1 <- ctree(myFormula, data = trainData, method = "class")
trainData
terro.ct1 <- ctree(myFormula, data = trainData)
nodes(terro.ct1,1)
terro.ct1
clear
slc
clc
clearPushBack()
terro.ct1
